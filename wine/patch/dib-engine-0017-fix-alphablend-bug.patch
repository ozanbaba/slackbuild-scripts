DIB Engine: fix Alphablend bug when using source bitmap

From: Massimo Del Fedele <max@veneto.com>


---
 dlls/winedib.drv/bitblt.c             |    3 +-
 dlls/winedib.drv/primitives_bitblt.c  |   45 ++++++++++++++++++++++++---------
 dlls/winedib.drv/primitives_convert.c |   23 ++++++++++-------
 3 files changed, 48 insertions(+), 23 deletions(-)

diff --git a/dlls/winedib.drv/bitblt.c b/dlls/winedib.drv/bitblt.c
index 680e1fd..225293a 100644
--- a/dlls/winedib.drv/bitblt.c
+++ b/dlls/winedib.drv/bitblt.c
@@ -385,6 +385,7 @@ CheckMapping(__FUNCTION__, "SOURCE",physDevSrc);
         /* DDB selected on dest DC -- must double-convert */
         HBITMAP tmpDIB, stock;
         HDC tmpDC;
+
         MAYBE(TRACE("Blending DIB->DDB\n"));
         
         /* we should anyways convert dest to physical coordinates here before processing
@@ -403,7 +404,7 @@ CheckMapping(__FUNCTION__, "SOURCE",physDevSrc);
 
         /* converts dest DDB onto a temporary DIB -- just the needed part */
         /* WARNING -- that one could fail if rectangle on dest id out of range */
-        tmpDIB = _DIBDRV_ConvertDevDDBtoDIB(physDevDst->hdc, physDevSrc->hdc, pd.x, pd.y, szDst.cx, szDst.cy);
+        tmpDIB = _DIBDRV_ConvertDevDDBtoDIB(physDevDst->hdc, physDevSrc->hdc, xDst, yDst, widthDst, heightDst);
         if(!tmpDIB)
         {
             ERR("Couldn't convert dest DDB to DIB\n");
diff --git a/dlls/winedib.drv/primitives_bitblt.c b/dlls/winedib.drv/primitives_bitblt.c
index 3505277..6f7ee14 100644
--- a/dlls/winedib.drv/primitives_bitblt.c
+++ b/dlls/winedib.drv/primitives_bitblt.c
@@ -89,7 +89,7 @@ static void StretchLine(DWORD *dst, int dstWidth, DWORD *src, int srcWidth)
 /* premultiply alpha channel on a line by a constant alpha
    note : it seems that pixels are already premultiplied
    by alpha channel content */
-static void PemultiplyLine(DWORD *dst, int width, BYTE constAlpha)
+static void PemultiplyLine(DWORD *dst, int width, BYTE constAlpha, BOOL hasAlpha)
 {
     int i = width;
     BYTE *alphaPnt = (BYTE *)dst + 3;
@@ -106,14 +106,29 @@ static void PemultiplyLine(DWORD *dst, int width, BYTE constAlpha)
     
     /* fully opaque, just do nothing */
     if(constAlpha == 255)
+    {
+        if(!hasAlpha)
+            while(i--)
+            {
+                *alphaPnt = 0xff;
+                alphaPnt += 4;
+            }
         return;
+    }
 
     /* intermediate -- premultiply alpha values */
-    while(i--)
-    {
-        *alphaPnt = MulDiv(*alphaPnt, constAlpha, 255);
-        alphaPnt += 4;
-    }
+    if(hasAlpha)
+        while(i--)
+        {
+            *alphaPnt = MulDiv(*alphaPnt, constAlpha, 255);
+            alphaPnt += 4;
+        }
+    else
+        while(i--)
+        {
+            *alphaPnt = constAlpha;
+            alphaPnt += 4;
+        }
     return;
         
 }
@@ -128,6 +143,7 @@ static void BlendLine(DWORD *dst, DWORD *src, int width)
     BYTE *blueDst  = (BYTE *)dst;
     BYTE *greenDst = blueDst  + 1;
     BYTE *redDst   = greenDst + 1;
+    BYTE *alphaDst = redDst   + 1;
     BYTE *blueSrc  = (BYTE *)src;
     BYTE *greenSrc = blueSrc  + 1;
     BYTE *redSrc   = greenSrc + 1;
@@ -143,6 +159,7 @@ static void BlendLine(DWORD *dst, DWORD *src, int width)
         *blueDst  = *blueSrc  + MulDiv(*blueDst,  alpha, 255);
         *greenDst = *greenSrc + MulDiv(*greenDst, alpha, 255);
         *redDst   = *redSrc   + MulDiv(*redDst,   alpha, 255);
+        *alphaDst = *alphaSrc + MulDiv(*alphaDst, alpha, 255);
 
         blueSrc  += 4;
         greenSrc += 4;
@@ -151,6 +168,7 @@ static void BlendLine(DWORD *dst, DWORD *src, int width)
         blueDst  += 4;
         greenDst += 4;
         redDst   += 4;
+        alphaDst += 4;
     }
 
 }
@@ -168,6 +186,9 @@ BOOL _DIBDRV_AlphaBlend_generic(DIBDRVPHYSDEV *physDevDst, INT xDst, INT yDst,
     /* constant alpha value */
     BYTE constAlpha = blendFn.SourceConstantAlpha;
     
+    /* checks wether source has alpha channel */
+    BOOL hasAlpha = blendFn.AlphaFormat & AC_SRC_ALPHA;
+    
     /* source and dest bitmaps */
     const DIBDRVBITMAP *srcBmp = physDevSrc->physBitmap;
     DIBDRVBITMAP *dstBmp = physDevDst->physBitmap;
@@ -194,7 +215,7 @@ BOOL _DIBDRV_AlphaBlend_generic(DIBDRVPHYSDEV *physDevDst, INT xDst, INT yDst,
             dstBmp->funcs->GetLine(dstBmp, yd, xDst, widthDst, dBuf);
             
             /* premultiply source by constant and pixel alpha */
-            PemultiplyLine(sBuf, widthSrc, constAlpha);
+            PemultiplyLine(sBuf, widthSrc, constAlpha, hasAlpha);
             
             /* blends source on dest */
             BlendLine(dBuf, sBuf, widthSrc);
@@ -219,7 +240,7 @@ BOOL _DIBDRV_AlphaBlend_generic(DIBDRVPHYSDEV *physDevDst, INT xDst, INT yDst,
             StretchLine(strBuf, widthDst, sBuf, widthSrc);
         
             /* premultiply source by constant and pixel alpha */
-            PemultiplyLine(strBuf, widthDst, constAlpha);
+            PemultiplyLine(strBuf, widthDst, constAlpha, hasAlpha);
             
             /* blends source on dest */
             BlendLine(dBuf, strBuf, widthDst);
@@ -245,7 +266,7 @@ BOOL _DIBDRV_AlphaBlend_generic(DIBDRVPHYSDEV *physDevDst, INT xDst, INT yDst,
                 dstBmp->funcs->GetLine(dstBmp, yd, xDst, widthDst, dBuf);
 
                 /* premultiply source by constant and pixel alpha */
-                PemultiplyLine(sBuf, widthSrc, constAlpha);
+                PemultiplyLine(sBuf, widthSrc, constAlpha, hasAlpha);
                 
                 /* blends source on dest */
                 BlendLine(dBuf, sBuf, widthDst);
@@ -273,7 +294,7 @@ BOOL _DIBDRV_AlphaBlend_generic(DIBDRVPHYSDEV *physDevDst, INT xDst, INT yDst,
                 srcBmp->funcs->GetLine(srcBmp, ys, xSrc, widthSrc, sBuf);
                 
                 /* premultiply source by constant and pixel alpha */
-                PemultiplyLine(sBuf, widthSrc, constAlpha);
+                PemultiplyLine(sBuf, widthSrc, constAlpha, hasAlpha);
                 
                 while(delta < heightDst)
                 {
@@ -314,7 +335,7 @@ BOOL _DIBDRV_AlphaBlend_generic(DIBDRVPHYSDEV *physDevDst, INT xDst, INT yDst,
                 StretchLine(strBuf, widthDst, sBuf, widthSrc);
 
                 /* premultiply source by constant and pixel alpha */
-                PemultiplyLine(strBuf, widthDst, constAlpha);
+                PemultiplyLine(strBuf, widthDst, constAlpha, hasAlpha);
                 
                 /* blends source on dest */
                 BlendLine(dBuf, strBuf, widthDst);
@@ -345,7 +366,7 @@ BOOL _DIBDRV_AlphaBlend_generic(DIBDRVPHYSDEV *physDevDst, INT xDst, INT yDst,
                 StretchLine(strBuf, widthDst, sBuf, widthSrc);
 
                 /* premultiply source by constant and pixel alpha */
-                PemultiplyLine(strBuf, widthDst, constAlpha);
+                PemultiplyLine(strBuf, widthDst, constAlpha, hasAlpha);
                 
                 while(delta < heightDst)
                 {
diff --git a/dlls/winedib.drv/primitives_convert.c b/dlls/winedib.drv/primitives_convert.c
index 7c4da14..fb9b213 100644
--- a/dlls/winedib.drv/primitives_convert.c
+++ b/dlls/winedib.drv/primitives_convert.c
@@ -113,6 +113,7 @@ BOOL _DIBDRV_GetLine32_BITFIELDS(const DIBDRVBITMAP *bmp, INT line, INT startx,
     for(; width ; width--)
     {
         *dwBuf++ =
+			0xff000000 |
             GetField32(*src, bmp->redShift  , bmp->redLen  ) << 16 |
             GetField32(*src, bmp->greenShift, bmp->greenLen) <<  8 |
             GetField32(*src, bmp->blueShift , bmp->blueLen );
@@ -148,7 +149,7 @@ BOOL _DIBDRV_GetLine24(const DIBDRVBITMAP *bmp, INT line, INT startx, int width,
         *bBuf++ = *src++;
         *bBuf++ = *src++;
         *bBuf++ = *src++;
-        *bBuf++ = 0x0;
+        *bBuf++ = 0xff;
     }
     return TRUE;
 }
@@ -180,7 +181,7 @@ BOOL _DIBDRV_GetLine16_RGB(const DIBDRVBITMAP *bmp, INT line, INT startx, int wi
     {
         b = *src++;
         /* 0RRR|RRGG|GGGB|BBBB */
-        *dwBuf++ = ((b & 0x1f) << 3) | ((b & 0x3e0) << 6) | ((b & 0x7c00) << 9);
+        *dwBuf++ = 0xff000000 | ((b & 0x1f) << 3) | ((b & 0x3e0) << 6) | ((b & 0x7c00) << 9);
     }
     return TRUE;
 }
@@ -212,7 +213,9 @@ BOOL _DIBDRV_GetLine16_BITFIELDS(const DIBDRVBITMAP *bmp, INT line, INT startx,
     {
         b = *src++;
 
-        *dwBuf++ =((( b & bmp->blueMask) >> bmp->blueShift ) << ( 8 - bmp->blueLen )) |
+        *dwBuf++ =
+				  0xff000000 |
+				  ((( b & bmp->blueMask) >> bmp->blueShift ) << ( 8 - bmp->blueLen )) |
                   (((b & bmp->greenMask) >> bmp->greenShift) << (16 - bmp->greenLen)) |
                   (((b & bmp->redMask  ) >> bmp->redShift  ) << (24 - bmp->redLen  ));
     }
@@ -242,7 +245,7 @@ BOOL _DIBDRV_GetLine8(const DIBDRVBITMAP *bmp, INT line, INT startx, int width,
 
     src = ((BYTE *)bmp->bits + line * bmp->stride + startx);
     for(; width ; width--)
-        *dwBuf++ = *((DWORD *)bmp->colorTable + *src++);
+        *dwBuf++ = 0xff000000 | *((DWORD *)bmp->colorTable + *src++);
     return TRUE;
 }
 
@@ -276,20 +279,20 @@ BOOL _DIBDRV_GetLine4(const DIBDRVBITMAP *bmp, INT line, INT startx, int width,
     /* if startx is odd, get first nibble */
     if(startx & 0x01)
     {
-        *dwBuf++ = *((DWORD *)bmp->colorTable + (*src++ & 0x0f));
+        *dwBuf++ = 0xff000000 | *((DWORD *)bmp->colorTable + (*src++ & 0x0f));
         width--;
     }
     
     /* then gets all full image bytes */
     for( ; width > 1 ; width -= 2)
     {
-        *dwBuf++ = *((DWORD *)bmp->colorTable + ((*src >> 4) & 0x0f));
-        *dwBuf++ = *((DWORD *)bmp->colorTable + (*src++ & 0x0f));
+        *dwBuf++ = 0xff000000 | *((DWORD *)bmp->colorTable + ((*src >> 4) & 0x0f));
+        *dwBuf++ = 0xff000000 | *((DWORD *)bmp->colorTable + (*src++ & 0x0f));
     }
     
     /* last nibble, if any */
     if(width)
-        *dwBuf++ = *((DWORD *)bmp->colorTable + ((*src >> 4) & 0x0f));
+        *dwBuf++ = 0xff000000 | *((DWORD *)bmp->colorTable + ((*src >> 4) & 0x0f));
     return TRUE;
 }
 
@@ -299,8 +302,8 @@ BOOL _DIBDRV_GetLine1(const DIBDRVBITMAP *bmp, INT line, INT startx, int width,
     BYTE *src;
     BYTE b;
     char i;
-    DWORD pixOn  = *((DWORD *)bmp->colorTable + 1);
-    DWORD pixOff = *(DWORD *)bmp->colorTable;
+    DWORD pixOn  = 0xff000000 | *((DWORD *)bmp->colorTable + 1);
+    DWORD pixOff = 0xff000000 | *(DWORD *)bmp->colorTable;
 
 #ifdef DIBDRV_CHECK_RANGES
     /* range check */
